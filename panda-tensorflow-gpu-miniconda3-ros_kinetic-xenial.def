# Ros kinetic panda_auto_grasp singularity container recipe
Bootstrap: docker
From: nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04

%help
    HPC Singularity container containing ros_kinetic, tensorflow_gpu & miniconda3. For more information see https://github.com/rickstaa/deep_robotics_singularity_recipes.

    == Container aliases ==
    ccd:      Cd to home path of singularity root container
    rsource:  source ros kinetic setup file
    atf:      Activate tensorflow gpu conda enviroment
    dtf:      Deactivate tensorflow gpu conda enviroment

%labels
    Maintainer: Rick Staa
    Github: https://github.com/rickstaa
    Version: v0.0.5
    Type: Private

$enviroment

    ## Set language options ##
    LANG=C.UTF-8 LC_ALL=C.UTF-8

    ## Set ROS distro variable ##
    ROS_DISTRO=kinetic

    ## Set conda path ##
    PATH /opt/conda/bin:$PATH

%post

    ## Install system package dependencies ##
    apt update --fix-missing
    apt install -q -y\
        wget \
        less \
        vim \
        git \
        bash-completion \
        htop \
        ssh \
		tar \
		libevent-dev \
        libncurses-dev \
        tmux \
		nautilus \
        gedit \
        x11-xserver-utils \
        ssh \
        software-properties-common \
        curl \
        bzip2 \
        iputils-ping \
        ca-certificates \
        figlet \
        dirmngr \
        gnupg2 \
        lsb-release
    apt clean
    rm -rf /var/lib/apt/lists/*

    ## Add a .singularity_bashrc file to the container ##
    bash -c "cd / \
        && git clone https://github.com/rickstaa/deep_robotics_singularity_recipes.git \
        && cp /deep_robotics_singularity_recipes/.singularity_bashrc /.singularity_bashrc \
        && rm -rf /deep_robotics_singularity_recipes"

    ## Install miniconda3 ##
    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /miniconda.sh
    /bin/bash /miniconda.sh -b -p /opt/conda
    rm /miniconda.sh
    /opt/conda/bin/conda clean -tipsy
    . /opt/conda/etc/profile.d/conda.sh
    conda install -q -y python=3
    conda update conda
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh
    echo "" >> /.singularity_bashrc
    echo "# >>> conda initialize >>>" >> /.singularity_bashrc
    echo ". /opt/conda/etc/profile.d/conda.sh" >> /.singularity_bashrc
    echo "conda activate tf-gpu" >> /.singularity_bashrc
    echo "# <<< conda initialize <<<" >> /.singularity_bashrc

    ## Create tf-gpu enviroment ##
    conda create -q -y --name tf-gpu
    conda activate tf-gpu

    ## Install jupyter notebooks
    conda install -y tensorflow-gpu
    conda install -y jupyter
    conda update --all

    ## Install pip (`apt-get install python-pip` causes trouble w/ networkx).
    curl -O https://bootstrap.pypa.io/get-pip.py && \
	    python get-pip.py && \
        rm get-pip.py
    curl -O https://bootstrap.pypa.io/get-pip.py && \
	    python3 get-pip.py && \
        rm get-pip.py

    ## setup ROS keys and sources.list ##
    echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list
    apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

    # install ROS bootstrap tools
    apt update
    apt install --no-install-recommends -y\
        python-rosdep \
        python-rosinstall \
        python-vcstools \
    rm -rf /var/lib/apt/lists/*

    # bootstrap rosdep
    rosdep init
    rosdep update

    ## Install ROS kinetic desktop full ##
    apt update
    apt install -q -y ros-kinetic-desktop-full

    ## Install MoveIt and check for panda_auto_grasp package dependencies
    rosdep update
    apt update
    apt dist-upgrade -y
    apt install -q -y ros-kinetic-catkin python-catkin-tools
    apt install -q -y ros-kinetic-moveit
    apt install -q -y \
       ros-kinetic-moveit-ros-move-group \
       ros-kinetic-controller-manager* \
       ros-kinetic-moveit* \
       ros-kinetic-effort-controllers \
       ros-kinetic-joint-trajectory-controller \
       ros-kinetic-gazebo-ros* \
       ros-kinetic-rviz* \
       ros-kinetic-joint-state-controller* \
       libboost-filesystem-dev \
       libjsoncpp-dev

    ## Install libfranca from source ##
    bash -c "cd / \
        && apt install -q -y ros-kinetic-libfranka ros-kinetic-franka-ros \
        && apt install -q -y build-essential cmake libpoco-dev libeigen3-dev \
        && apt remove -y "*libfranka*" \
        && git clone --recursive https://github.com/frankaemika/libfranka.git \
        && cd /libfranka \
        && mkdir build \
        && cd build \
        && cmake -DCMAKE_BUILD_TYPE=Release .. \
        && cmake --build ."

    ## Create catkin workspace folder and clone the panda_simulation repository ##
    bash -c "mkdir -p /panda_simulation_ws \
        && cd /aptpanda_simulation_ws \
        && git clone https://github.com/rickstaa/panda_simulation.git src"

    ### Build panda_simulation project package
    bash -c "cd /aptpanda_simulation_ws \
        && rosdep install --from-paths src --ignore-src --rosdistro kinetic -y --skip-keys libfranka \
        && source /opt/ros/kinetic/setup.sh \
        && catkin build -j4 -DCMAKE_BUILD_TYPE=Release -DFranka_DIR:PATH=/libfranka/build"

    ## Upgrade packages and remove unused packages ##
    apt -q -y upgrade
    apt autoremove
    apt autoclean
    rm -rf /var/lib/apt/lists/*

%runscript

	## Execute the .singularity_bashrc file ##
	OCI_CMD='/bin/bash'
	OCI_ARGS='-rcfile /.singularity_bashrc'
	SINGULARITY_OCI_RUN="${OCI_CMD} ${OCI_ARGS}"
	exec $SINGULARITY_OCI_RUN