# Ros kinetic panda_auto_grasp singularity container recipe
Bootstrap: docker
From: nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04

%help
    A HPC Singularity container containing the following packages:
        - ros_kinetic
        - moveit
        - tensorflow_gpu
        - miniconda3
        - CUDA 10
        - CUDNN 7

    Container aliases:
        - rsource:  Source the ROS kinetic setup file
        - rossu:    Source a setup.bash file in ./devel/setup.bash
        - atf:      Activate the tf-gpu conda enviroment
        - dtf:      Deactivate the tf-gpu conda enviroment
        - dconda:   Deactivate conda enviroment

    For more information see https://deep-robotics.dev.
%labels
    Maintainer: Rick Staa
    Github: https://github.com/rickstaa
    Version: v0.0.8
    Type: Private
%environment
    ## Set ROS distro variable ##
    ROS_DISTRO=kinetic

    ## Cuda samples env var ##
    export NVCUDASAMPLES_ROOT=/opt/NVIDIA_CUDA-10.0_Samples
%post
    ## Install system package dependencies ##
    apt update --fix-missing
    apt install -q -y\
        wget \
        less \
        vim \
        git \
        bash-completion \
        htop \
        ssh \
		tar \
		libevent-dev \
        libncurses-dev \
        tmux \
		nautilus \
        gedit \
        x11-xserver-utils \
        ssh \
        software-properties-common \
        curl \
        bzip2 \
        iputils-ping \
        ca-certificates \
        figlet \
        dirmngr \
        gnupg2 \
        lsb-release \
        unzip \
        cmake \
        pkg-config \
	    wget \
        tree
    apt clean
    rm -rf /var/lib/apt/lists/*

    ## Install opencl dependencies
    apt install -q -y\
        nvidia-modprobe \
        opencl-headers

    ## Fix system python dependencies
    apt update --fix-missing
    apt install -q -y\
        build-essential \
        python3 \
        python-dev \
        python3-dev \
        python-tk \
        python3-tk \
        python-opengl \
        libsm6 \
        libxext6 \
        libglib2.0-0 \
        libxrender1 \
        libgtk2.0-dev

    ## Install pip (`apt-get install python-pip` causes trouble w/ networkx).
    curl -O https://bootstrap.pypa.io/get-pip.py && \
	    python get-pip.py && \
        rm get-pip.py
    curl -O https://bootstrap.pypa.io/get-pip.py && \
	    python3 get-pip.py && \
        rm get-pip.py

    ## Install virtual env package ##
    python -m pip install virtualenv
    python2 -m pip install virtualenv

    ## Add container resources to the container ##
    bash -c "cd / \
        && git clone https://github.com/rickstaa/deep_robotics_singularity_recipes.git \
        && cp /deep_robotics_singularity_recipes/resources/.singularity_bashrc /.singularity_bashrc \
        && cp /deep_robotics_singularity_recipes/resources/.conda_init /.conda_init \
        && cp /deep_robotics_singularity_recipes/resources/.conda_wrapper /.conda_wrapper \
        && cp /deep_robotics_singularity_recipes/resources/welcome_msgs/tf_gpu-conda3-ros_kinetic-moveit-cuda10-xenial.txt /.welcome_msg \
        && cp /deep_robotics_singularity_recipes/resources/bash_aliases/.singularity_bash_aliases /.singularity_bash_aliases \
        && rm -rf /deep_robotics_singularity_recipes"

    ## Install miniconda3 ##
    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /miniconda.sh
    /bin/bash /miniconda.sh -b -p /opt/conda
    rm /miniconda.sh
    /opt/conda/bin/conda clean --all
    /opt/conda/bin/conda install -q -y python=3
    /opt/conda/bin/conda update -y conda
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh

    ## Add conda enviroment activation command to .singularity_bashrc ##
    echo "" >> /.singularity_bashrc
    echo "## Activate autograsp enviroment" >> /.singularity_bashrc
    echo "conda activate tf-gpu" >> /.singularity_bashrc

    ## Create tf-gpu enviroment ##
    /opt/conda/bin/conda create -q -y -n tf-gpu python=3.7
    . /etc/profile.d/conda.sh
    /opt/conda/bin/conda activate tf-gpu

    ## Install python packages ##
    /opt/conda/bin/conda install -y tensorflow-gpu
    #conda install -y jupyter
    /opt/conda/bin/conda update --all

    ## Install pip in environment (`apt-get install python-pip` causes trouble w/ networkx).
    curl -O https://bootstrap.pypa.io/get-pip.py && \
	    python3 get-pip.py && \
        rm get-pip.py

    ## setup ROS keys and sources.list ##
    echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list
    apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

    ## Install ROS kinetic desktop full ##
    apt update
    apt install -q -y ros-kinetic-desktop-full

    # bootstrap rosdep
    rosdep init
    rosdep update

    ## Install MoveIt and ros building packages
    rosdep update
    apt update
    apt dist-upgrade -y
    apt install -q -y ros-kinetic-catkin python-catkin-tools
    apt install -q -y ros-kinetic-moveit
    apt install -q -y \
       ros-kinetic-moveit-ros-move-group \
       ros-kinetic-controller-manager* \
       ros-kinetic-moveit* \
       ros-kinetic-effort-controllers \
       ros-kinetic-joint-trajectory-controller \
       ros-kinetic-gazebo-ros* \
       ros-kinetic-rviz* \
       ros-kinetic-joint-state-controller* \
       libboost-filesystem-dev \
       libjsoncpp-dev \
       python-vcstools \
       python-wstool \
       python-rosinstall \
       python-rosinstall-generator

    ## Download cuda10.0 samples and set cmake variables ##
    bash -c "cd /opt \
        && git clone https://github.com/NVIDIA/cuda-samples \
        && mv cuda-samples NVIDIA_CUDA-10.0_Samples \
        && cd NVIDIA_CUDA-10.0_Samples \
        && mv Samples samples \
        && mv Common common \
        && git checkout v10.0"

    ## Upgrade packages and remove unused packages ##
    apt upgrade -y -q
    apt autoremove -y -q
    apt autoclean -y -q
    rm -rf /var/lib/apt/lists/*
%runscript
	## Execute the .singularity_bashrc file ##
	OCI_CMD='/bin/bash'
	OCI_ARGS='-rcfile /.singularity_bashrc'
	SINGULARITY_OCI_RUN="${OCI_CMD} ${OCI_ARGS}"
	exec $SINGULARITY_OCI_RUN
