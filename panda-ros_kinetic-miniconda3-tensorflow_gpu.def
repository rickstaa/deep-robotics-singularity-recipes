# Ros kinetic panda_auto_grasp singularity container recipe
Bootstrap: docker
From: osrf/ros:kinetic-desktop-full-xenial

%help
    singularity container with Ros kinetic, gazebo7 and all the other packages needed for the panda_auto_grasp package. Since the panda_auto_grasp package is still under development it is set to private. You therefore need the right git permissions for the singularity image to work.

%labels
    Maintainer: Rick Staa
    Github: https://github.com/rickstaa
    Version v1.0
    Type: Private

%post

    printf '
================= panda_autograsp_kinetic container =================
INFO: Setting up panda_autograsp_kinetic container. As three of the
repositories that are contained in this container are private you
will be asked for your github credentials three times at the start
of the building process.
=====================================================================
' > /dev/null

    ## Create catkin workspace folder and clone the panda_simulation repository ##
    bash -c "mkdir -p /panda_autograsp_ws \
        && cd /panda_autograsp_ws \
        && git clone https://github.com/rickstaa/panda_simulation.git src"

    ## Setup ros source list ##
    sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
    apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
    bash -c "source /opt/ros/kinetic/setup.sh"

    ## Install packages ##
    apt-get update
    apt-get install -q -y\
        wget \
        less \
        vim \
        git-core \
        bash-completion \
        htop \
        ssh \
		tar \
		libevent-dev \
        libncurses-dev \
        tmux \
		nautilus \
        gedit \
        x11-xserver-utils \
        ssh \
        software-properties-common \
        curl \
        iputils-ping
    apt-get clean

    ## Install libfranca from source ##
    bash -c "cd / \
        && apt-get install -q -y ros-kinetic-libfranka ros-kinetic-franka-ros \
        && apt-get install -q -y build-essential cmake libpoco-dev libeigen3-dev \
        && apt remove -y "*libfranka*" \
        && git clone --recursive https://github.com/frankaemika/libfranka.git \
        && cd /libfranka \
        && mkdir build \
        && cd build \
        && cmake -DCMAKE_BUILD_TYPE=Release .. \
        && cmake --build ."

    ## Install MoveIt and check for panda_auto_grasp package dependencies
    rosdep update
    apt-get update
    apt-get dist-upgrade -y
    apt-get install -q -y ros-kinetic-catkin python-catkin-tools
    apt-get install -q -y ros-kinetic-moveit
    apt-get install -q -y \
       ros-kinetic-moveit-ros-move-group \
       ros-kinetic-controller-manager* \
       ros-kinetic-moveit* \
       ros-kinetic-effort-controllers \
       ros-kinetic-joint-trajectory-controller \
       ros-kinetic-gazebo-ros* \
       ros-kinetic-rviz* \
       ros-kinetic-joint-state-controller* \
       libboost-filesystem-dev \
       libjsoncpp-dev

    ### Build panda_auto_grasp project packages
    bash -c "cd /panda_autograsp_ws \
        && rosdep install --from-paths src --ignore-src --rosdistro kinetic -y --skip-keys libfranka \
        && source /opt/ros/kinetic/setup.sh \
        && catkin build -j4 -DCMAKE_BUILD_TYPE=Release -DFranka_DIR:PATH=/libfranka/build"

    ## Install kinect2.0 Library ##
    apt-get update
    apt-get install -q -y \
        build-essential \
        cmake \
        pkg-config \
        libusb-1.0-0-dev \
        libturbojpeg \
        libjpeg-turbo8-dev \
        libglfw3-dev \
        libopenni2-dev
    bash -c "git clone https://github.com/OpenKinect/libfreenect2.git \
        && cd libfreenect2 \
        && pwd \
        && mkdir build \
        && cd build \
        && cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/freenect2 \
        && make \
        && make install \
        && mkdir -p /etc/udev/rules.d/ \
        && cp ../platform/linux/udev/90-kinect2.rules /etc/udev/rules.d/"

	### Copy .singularity_bashrc repository file from panda_autograsp_singularity_recipes repository ###
    bash -c "cd /tmp \
        && git clone https://github.com/rickstaa/deep_robotics_singularity_recipes.git \
        && cp deep_robotics_singularity_recipes/.singularity_bashrc /.singularity_bashrc"

    ## Install miniconda3 ##
    apt-get -qq update && apt-get -qq -y install curl bzip2 \
        && curl -sSL https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -o /tmp/miniconda.sh \
        && bash /tmp/miniconda.sh -bfp /usr/local \
        && rm -rf /tmp/miniconda.sh \
        && conda install -y python=3 \
        && conda update conda \
        && apt-get -qq -y remove curl bzip2 \
        && apt-get -qq -y autoremove \
        && apt-get autoclean \
        && rm -rf /var/lib/apt/lists/* /var/log/dpkg.log \
        && conda clean --all --yes

    ## Install jupyter notebooks
    conda install -y jupyter

    ## Install tensorflow-gpu
    conda install -y tensorflow-gpu

    ## Add conda initialization
    bash -c "cd /tmp \
        && cat deep_robotics_singularity_recipes/.conda_init >> /.singularity_bashrc"

    ## Remove unused packages ##
    apt-get -q -y upgrade
    apt-get auto-remove -y

%runscript

	## Run custom entrypoint BASH script ##
	OCI_CMD='/bin/bash'
	OCI_ARGS='-rcfile /.singularity_bashrc'
	SINGULARITY_OCI_RUN="${OCI_CMD} ${OCI_ARGS}"
	exec $SINGULARITY_OCI_RUN

%environment

    ## Change floating point format ##
    LC_NUMERIC="en_US.UTF-8"

    ## Add miniconda to path ##
    export PATH="/opt/conda/bin:$PATH"
