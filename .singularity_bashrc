#### Singularity container .bashrc script ###############################
# author: Rick Staa
# github: https://github.com/rickstaa/.singularity_bashrc
#
# This script performs some actions that normaly the .bashrc script would
# perform. This script is sourced through a runscript.
#
# based on: The script of Zorglub29 at
# https://stackoverflow.com/questions/51037873/bash-script-to-perform-action-in-a-singularity-container-it-opens
#########################################################################

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*|screen*)
	SINGULARITY_STR="sing-"
  	CONTAINER_NAME=${SINGULARITY_STR}$(basename ${SINGULARITY_CONTAINER})
    PS1="${CONTAINER_NAME}-\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Display pandasim welcome message
# echo "Pandasim singularity contrainer opened."

# Setup Panda_simulation enviroment (chained to franka_ros and moveit)
#if [ -f "/panda_autograsp_ws/devel/setup.bash" ]; then
#	source "/panda_autograsp_ws/devel/setup.bash"
#fi

# Source git bash completion
if [ -f "/usr/share/bash-completion/completions/git" ]; then
	source /usr/share/bash-completion/completions/git
fi

# Add workspace folder cd alias
if [ "$(ls -A "/home" 2> /dev/null)" == "" ]; then
   	alias pcd='cd /panda_autograsp_ws/src'
else
	alias pcd='cd $SINGULARITY_CONTAINER/panda_autograsp_ws/src'
fi

# Add user defined aliases
alias atf='conda activate tf-gpu'
alias dtf='conda deactivate'
alias python='/usr/bin/python'
alias rsource='. /opt/ros/kinetic/setup.bash'
alias psource='. /panda_autograsp_ws/devel/setup.bash'
alias pbuild='. /opt/ros/kinetic/setup.bash; catkin build -j4 -DCMAKE_BUILD_TYPE=Release -DFranka_DIR:PATH=/libfranka/build'
